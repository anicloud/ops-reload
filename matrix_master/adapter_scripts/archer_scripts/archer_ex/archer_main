#!/usr/bin/perl -w

my @TMP_ARGV;
my $g_tmp_basedir;
BEGIN {
    use Cwd 'realpath';
    $g_tmp_basedir = __FILE__;
    $g_tmp_basedir = realpath($g_tmp_basedir);

    $g_tmp_basedir =~ s/[^\/]+$//;
    unshift( @INC, $g_tmp_basedir );
    @TMP_ARGV = @ARGV;
}

use strict;

use Getopt::Long;
use FileHandle;
use File::Basename;
use File::Glob ':globally';
use Data::Dumper;
use lib::Tiny;

sub main{
    my $action = $ARGV[0];
    my $deployPath = $ARGV[1];
    my $tmpConf = $ARGV[2];
    if (!defined($action) || !defined($deployPath) || $deployPath eq '' || ! -e $deployPath){
        print "[Fail]action, or deployPath is not set\n";
        return -1;
    }

    $action = "\L$action";

    print "[". localtime(time()) ."]start archer action $action\n";

    my $params = lib::Tiny->read($tmpConf);
    $params = $params->[0];
    if (!$params){
        print "[Fail]get params from $tmpConf failed\n";
        return -1;
    }

    my $source = $params->{packageSource};
    my $tag = "GROUP:$params->{group}";
    if ($params->{tag}) {
        while (my ($k, $v) = each %{$params->{tag}}) {
            $tag .= "," . $k . ":" . $v;
        }
    }
    my $serviceName = $params->{serviceName};
    $ENV{'CONTAINER_PATH'} = $params->{containerDir};

    # do action free
    if ($action eq 'remove'){
        print "[Notice]we are in uninstall\n";

        # first delete ct
        my $cmd = "$g_tmp_basedir/../single_code/ct/deployCT.sh -m $serviceName -p \"$ENV{'CONTAINER_PATH'}\" -c /dev/null";
        print $cmd . "\n";
        system($cmd);

        # then call control
        my $control = "$deployPath/matrix/bin/noah_control";
        if (-e $control){
            my $controlCmd = "cd $deployPath && $control stop";
            print "[Notice]try to exec: $controlCmd\n";
            my $controlRet = system($controlCmd);
            if ($controlRet != 0){
                print "[Fail]call control stop failed\n";
                return -1;
            }
        }
        else {
            print "[Notice]No control\n";
            return -2;
        }
        return 0;
    }

    # do action status
    if ($action eq 'status') {
        print "[Notice]we are in status\n";
        # then call status
        my $status = "$deployPath/matrix/bin/status";
        if (-e $status) {
            my $statusCmd = "cd $deployPath && $status";
            print "[Notice]try to exec: $statusCmd\n";
            my $statusRet = system($statusCmd);
            print "[Notice]status code: $statusRet\n";
            my $killSignal = $statusRet % 256;
            my $exitCode = $statusRet / 256;
            if ($killSignal == 0) { # status script exit normally.
                return $exitCode;
            } else { # status script was killed by signal.
                return $killSignal + 128;
            }
        } else {
            return 0;
        }
    }

    my $selfPath = __FILE__;
    $selfPath =~ s/[^\/]+$//;
    $selfPath.= "/../";
    my $tmpFile = dirname($tmpConf) . "/archer_code_$$/";
    `mkdir -p $tmpFile`;
    $tmpFile.= "single/";
    `cp -rf '$selfPath' '$tmpFile'`;

    my $instanceConf = "$tmpFile/instance.conf";
    `cp -f $tmpConf $instanceConf`;

    my $cmd = "cp -f $tmpFile/archer_ex/operation_list_$action $tmpFile/single_code/operation_list.yaml";
    `$cmd`;
    $cmd = "./noah-deploy-single.pl --highVersion -s $source --action=$action --module=$serviceName  --machineinterval=0 -d $deployPath -g '$tag' --remote 2>&1";


    print "[Notice]try to execute cmd: $cmd\n";
    my $ret = system("cd $tmpFile && $cmd");
    $tmpFile = dirname($tmpConf) . "/archer_code_$$/";
    `rm -rf $tmpFile`;

    return ($ret == 0) ? 0 : -1;
}

$ARGV[0] = "\L$ARGV[0]";
if ($ARGV[0] eq 'install') {
    $ARGV[0] = "update";
}

my $mainRet = main();

print "[". localtime(time()) ."]end of archer action \L$ARGV[0]\n\n\n";

exit $mainRet;
